/*
 * Test in this module is based on execution and planning time values. By
 * default it may be unstable. We tune queries as much is possible to be stable.
 * But still, don't care immediately, if results comparison is failed.
 */
CREATE EXTENSION pg_mentor CASCADE;
CREATE FUNCTION show_entries()
RETURNS TABLE (
  refcounter		integer,
  plan_cache_mode	integer,
  calls				bigint,
  query				text
)  AS $$
BEGIN
  RETURN QUERY
    SELECT p.refcounter,p.plan_cache_mode,s.calls,s.query
    FROM pg_mentor_show_prepared_statements(-1) p JOIN
	  pg_stat_statements s USING (queryid);
END;
$$ LANGUAGE PLPGSQL;
CREATE OR REPLACE FUNCTION expln(query_string text) RETURNS SETOF text AS $$
BEGIN
    RETURN QUERY
        EXECUTE format('EXPLAIN (VERBOSE, COSTS OFF, TIMING OFF, SUMMARY OFF) %s', query_string);
    RETURN;
END;
$$ LANGUAGE PLPGSQL;
CREATE OR REPLACE FUNCTION get_queryId(query_string text) RETURNS bigint AS $$
DECLARE
  res     json;
  queryId bigint;
BEGIN
  EXECUTE format('EXPLAIN (VERBOSE, COSTS OFF, FORMAT JSON) %s', query_string)
  INTO res;

  SELECT res->0->>'Query Identifier' INTO queryId;
  RETURN queryId;
END;
$$ LANGUAGE PLPGSQL;
CREATE TABLE test(x integer);
VACUUM ANALYZE test;
PREPARE stmt1(integer) AS SELECT * FROM test WHERE x = $1;
SELECT get_queryId('EXECUTE stmt1(1)') AS query_id \gset
EXPLAIN (COSTS OFF) EXECUTE stmt1(1); -- custom plan
    QUERY PLAN     
-------------------
 Seq Scan on test
   Filter: (x = 1)
(2 rows)

SELECT pg_mentor_set_plan_mode(:query_id, 1);
 pg_mentor_set_plan_mode 
-------------------------
 t
(1 row)

EXPLAIN (COSTS OFF) EXECUTE stmt1(1); -- generic plan
     QUERY PLAN     
--------------------
 Seq Scan on test
   Filter: (x = $1)
(2 rows)

SELECT pg_mentor_set_plan_mode(:query_id, 2);
 pg_mentor_set_plan_mode 
-------------------------
 t
(1 row)

EXPLAIN (COSTS OFF) EXECUTE stmt1(1); -- custom plan
    QUERY PLAN     
-------------------
 Seq Scan on test
   Filter: (x = 1)
(2 rows)

SELECT pg_mentor_set_plan_mode(:query_id, 0);
 pg_mentor_set_plan_mode 
-------------------------
 t
(1 row)

EXPLAIN (COSTS OFF) EXECUTE stmt1(1); -- auto mode
    QUERY PLAN     
-------------------
 Seq Scan on test
   Filter: (x = 1)
(2 rows)

SELECT oid AS dboid FROM pg_database WHERE datname = current_database() \gset
SELECT true FROM pg_stat_statements_reset(0, :dboid);
 ?column? 
----------
 t
(1 row)

-- Prepare the case when custom plan cost all the time much less than the
-- generic one
CREATE TABLE part (
	id int
) PARTITION BY RANGE (id);
CREATE TABLE part1 PARTITION OF part FOR VALUES FROM (0) to (100);
CREATE TABLE part2 PARTITION OF part FOR VALUES FROM (100) to (200);
INSERT INTO part (id) SELECT x%200 FROM generate_series(1,1E4) AS x;
CREATE INDEX part_idx_1 ON part (id);
CREATE INDEX part_idx_2 ON part (id);
CREATE INDEX part_idx_3 ON part (id);
VACUUM ANALYZE part,part1,part2;
PREPARE qry (integer) AS SELECT * FROM part WHERE id IN ($1, $1+1);
EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry(1);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,2}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry(2);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{2,3}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry(3);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{3,4}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry(4);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{4,5}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry(5);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{5,6}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry(6);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{6,7}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry(1); -- it uses custom plan yet
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,2}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

SELECT * FROM reconsider_ps_modes();
 to_generic | to_custom | unchanged 
------------+-----------+-----------
          1 |         0 |         5
(1 row)

EXPLAIN (COSTS OFF) EXECUTE qry(1); -- should be generic plan
                        QUERY PLAN                         
-----------------------------------------------------------
 Append
   Subplans Removed: 1
   ->  Index Only Scan using part1_id_idx2 on part1 part_1
         Index Cond: (id = ANY (ARRAY[$1, ($1 + 1)]))
(4 rows)

SELECT * FROM reconsider_ps_modes(0, true); -- and try again, clear stat at the end.
 to_generic | to_custom | unchanged 
------------+-----------+-----------
          0 |         0 |         6
(1 row)

CREATE TABLE part3 AS SELECT 201::int AS id
FROM generate_series(1,1E4) AS x;
VACUUM ANALYZE part3;
ALTER TABLE part ATTACH PARTITION part3 FOR VALUES FROM (200) to (301);
PREPARE qry1 (integer[]) AS SELECT * FROM part WHERE id = ANY ($1);
-- Step 3: should be bad because sometimes we return single tuple but sometimes
-- multiple tuples. Planning is quick enough.
PREPARE qry2 (integer) AS SELECT * FROM part WHERE id < $1;
EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry2(210);
                          QUERY PLAN                           
---------------------------------------------------------------
 Append (actual rows=20000.00 loops=1)
   ->  Seq Scan on part1 part_1 (actual rows=5000.00 loops=1)
         Filter: (id < 210)
   ->  Seq Scan on part2 part_2 (actual rows=5000.00 loops=1)
         Filter: (id < 210)
   ->  Seq Scan on part3 part_3 (actual rows=10000.00 loops=1)
         Filter: (id < 210)
(7 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry1(ARRAY[1,2]); -- good execution
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,2}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry1(ARRAY[1,2]); -- need another one to not decide on a single shot
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,2}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

SELECT * FROM reconsider_ps_modes(); -- good to try generic plan mode
 to_generic | to_custom | unchanged 
------------+-----------+-----------
          1 |         0 |         7
(1 row)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry2(110);
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Append (actual rows=5500.00 loops=1)
   ->  Seq Scan on part1 part_1 (actual rows=5000.00 loops=1)
         Filter: (id < 110)
   ->  Index Only Scan using part2_id_idx2 on part2 part_2 (actual rows=500.00 loops=1)
         Index Cond: (id < 110)
         Heap Fetches: 0
         Index Searches: 1
(7 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry1(ARRAY[1,3]); -- one more good execution
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Append (actual rows=100.00 loops=1)
   ->  Index Only Scan using part1_id_idx2 on part1 part_1 (actual rows=100.00 loops=1)
         Index Cond: (id = ANY ($1))
         Heap Fetches: 0
         Index Searches: 1
   ->  Index Only Scan using part2_id_idx2 on part2 part_2 (actual rows=0.00 loops=1)
         Index Cond: (id = ANY ($1))
         Heap Fetches: 0
         Index Searches: 1
   ->  Index Only Scan using part3_id_idx2 on part3 part_3 (actual rows=0.00 loops=1)
         Index Cond: (id = ANY ($1))
         Heap Fetches: 0
         Index Searches: 1
(13 rows)

SELECT * FROM reconsider_ps_modes(); -- do not change previous decision
 to_generic | to_custom | unchanged 
------------+-----------+-----------
          0 |         0 |         8
(1 row)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry1(ARRAY[1,201]); --bad execution
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Append (actual rows=10050.00 loops=1)
   ->  Index Only Scan using part1_id_idx2 on part1 part_1 (actual rows=50.00 loops=1)
         Index Cond: (id = ANY ($1))
         Heap Fetches: 0
         Index Searches: 2
   ->  Index Only Scan using part2_id_idx2 on part2 part_2 (actual rows=0.00 loops=1)
         Index Cond: (id = ANY ($1))
         Heap Fetches: 0
         Index Searches: 2
   ->  Index Only Scan using part3_id_idx2 on part3 part_3 (actual rows=10000.00 loops=1)
         Index Cond: (id = ANY ($1))
         Heap Fetches: 0
         Index Searches: 1
(13 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry2(1);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=50.00 loops=1)
   Index Cond: (id < 1)
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

-- change qry1 and qry2 plan cache modes to custom.
SELECT * FROM reconsider_ps_modes(0, true);
 to_generic | to_custom | unchanged 
------------+-----------+-----------
          0 |         2 |         6
(1 row)

-- Do a series of executions that have similar execution time to decide that
-- it is stable enough to go generic.
EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry2(1); -- Must be custom plan
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=50.00 loops=1)
   Index Cond: (id < 1)
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry2(1);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=50.00 loops=1)
   Index Cond: (id < 1)
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry2(1);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=50.00 loops=1)
   Index Cond: (id < 1)
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry1(ARRAY[1,3]);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,3}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry1(ARRAY[1,3]);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,3}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry1(ARRAY[1,3]);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,3}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

-- Nothing changes, switch back to generic plan for qry2 and don't change qry1.
SELECT * FROM reconsider_ps_modes(0, true);
 to_generic | to_custom | unchanged 
------------+-----------+-----------
          1 |         0 |         7
(1 row)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry2(1); -- must be generic
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Append (actual rows=50.00 loops=1)
   Subplans Removed: 2
   ->  Index Only Scan using part1_id_idx2 on part1 part_1 (actual rows=50.00 loops=1)
         Index Cond: (id < $1)
         Heap Fetches: 0
         Index Searches: 1
(6 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry1(ARRAY[1,3]); -- must be custom
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,3}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

DEALLOCATE ALL;
DROP TABLE test CASCADE;
