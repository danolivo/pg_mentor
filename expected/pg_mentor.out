CREATE EXTENSION pg_mentor CASCADE;
NOTICE:  installing required extension "pg_stat_statements"
CREATE OR REPLACE FUNCTION expln(query_string text) RETURNS SETOF text AS $$
BEGIN
    RETURN QUERY
        EXECUTE format('EXPLAIN (VERBOSE, COSTS OFF, TIMING OFF, SUMMARY OFF) %s', query_string);
    RETURN;
END;
$$ LANGUAGE PLPGSQL;
CREATE OR REPLACE FUNCTION get_queryId(query_string text) RETURNS bigint AS $$
DECLARE
  res     json;
  queryId bigint;
BEGIN
  EXECUTE format('EXPLAIN (VERBOSE, COSTS OFF, FORMAT JSON) %s', query_string)
  INTO res;

  SELECT res->0->>'Query Identifier' INTO queryId;
  RETURN queryId;
END;
$$ LANGUAGE PLPGSQL;
CREATE TABLE test(x integer);
VACUUM ANALYZE test;
PREPARE stmt1(integer) AS SELECT * FROM test WHERE x = $1;
SELECT get_queryId('EXECUTE stmt1(1)') AS query_id \gset
EXPLAIN (COSTS OFF) EXECUTE stmt1(1); -- custom plan
    QUERY PLAN     
-------------------
 Seq Scan on test
   Filter: (x = 1)
(2 rows)

SELECT pg_mentor_set_plan_mode(:query_id, 1);
 pg_mentor_set_plan_mode 
-------------------------
 t
(1 row)

EXPLAIN (COSTS OFF) EXECUTE stmt1(1); -- generic plan
     QUERY PLAN     
--------------------
 Seq Scan on test
   Filter: (x = $1)
(2 rows)

SELECT pg_mentor_set_plan_mode(:query_id, 2);
 pg_mentor_set_plan_mode 
-------------------------
 t
(1 row)

EXPLAIN (COSTS OFF) EXECUTE stmt1(1); -- custom plan
    QUERY PLAN     
-------------------
 Seq Scan on test
   Filter: (x = 1)
(2 rows)

SELECT pg_mentor_set_plan_mode(:query_id, 0);
 pg_mentor_set_plan_mode 
-------------------------
 t
(1 row)

EXPLAIN (COSTS OFF) EXECUTE stmt1(1); -- auto mode
    QUERY PLAN     
-------------------
 Seq Scan on test
   Filter: (x = 1)
(2 rows)

-- Prepare the case when custom plan cost all the time much less than the
-- generic one
CREATE TABLE part (
	id int
) PARTITION BY RANGE (id);
CREATE TABLE part1 PARTITION OF part FOR VALUES FROM (0) to (100);
CREATE TABLE part2 PARTITION OF part FOR VALUES FROM (100) to (200);
INSERT INTO part (id) SELECT x%200 FROM generate_series(1,1E4) AS x;
CREATE INDEX part_idx_1 ON part (id);
CREATE INDEX part_idx_2 ON part (id);
CREATE INDEX part_idx_3 ON part (id);
VACUUM ANALYZE part,part1,part2;
PREPARE qry (integer) AS SELECT * FROM part WHERE id IN ($1, $1+1);
EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry(1);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,2}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry(1);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,2}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry(1);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,2}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry(1);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,2}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry(1);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,2}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, BUFFERS OFF, TIMING OFF, SUMMARY OFF)
EXECUTE qry(1);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part (actual rows=100.00 loops=1)
   Index Cond: (id = ANY ('{1,2}'::integer[]))
   Heap Fetches: 0
   Index Searches: 1
(4 rows)

EXPLAIN (COSTS OFF) EXECUTE qry(1); -- it uses custom plan yet
                    QUERY PLAN                     
---------------------------------------------------
 Index Only Scan using part1_id_idx2 on part1 part
   Index Cond: (id = ANY ('{1,2}'::integer[]))
(2 rows)

SELECT pg_mentor_nail_long_planned();
 pg_mentor_nail_long_planned 
-----------------------------
                           7
(1 row)

EXPLAIN (COSTS OFF) EXECUTE qry(1); -- should be generic plan
                        QUERY PLAN                         
-----------------------------------------------------------
 Append
   Subplans Removed: 1
   ->  Index Only Scan using part1_id_idx2 on part1 part_1
         Index Cond: (id = ANY (ARRAY[$1, ($1 + 1)]))
(4 rows)

DEALLOCATE ALL;
DROP TABLE test CASCADE;
